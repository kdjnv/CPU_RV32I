$date
	Mon Jul 14 14:23:12 2025
$end
$version
	ModelSim Version 10.5b
$end
$timescale
	1ps
$end

$scope module Data_memory_tb $end
$var reg 1 ! clk $end
$var reg 32 " mem_addr [31:0] $end
$var wire 1 # mem_ldata [31] $end
$var wire 1 $ mem_ldata [30] $end
$var wire 1 % mem_ldata [29] $end
$var wire 1 & mem_ldata [28] $end
$var wire 1 ' mem_ldata [27] $end
$var wire 1 ( mem_ldata [26] $end
$var wire 1 ) mem_ldata [25] $end
$var wire 1 * mem_ldata [24] $end
$var wire 1 + mem_ldata [23] $end
$var wire 1 , mem_ldata [22] $end
$var wire 1 - mem_ldata [21] $end
$var wire 1 . mem_ldata [20] $end
$var wire 1 / mem_ldata [19] $end
$var wire 1 0 mem_ldata [18] $end
$var wire 1 1 mem_ldata [17] $end
$var wire 1 2 mem_ldata [16] $end
$var wire 1 3 mem_ldata [15] $end
$var wire 1 4 mem_ldata [14] $end
$var wire 1 5 mem_ldata [13] $end
$var wire 1 6 mem_ldata [12] $end
$var wire 1 7 mem_ldata [11] $end
$var wire 1 8 mem_ldata [10] $end
$var wire 1 9 mem_ldata [9] $end
$var wire 1 : mem_ldata [8] $end
$var wire 1 ; mem_ldata [7] $end
$var wire 1 < mem_ldata [6] $end
$var wire 1 = mem_ldata [5] $end
$var wire 1 > mem_ldata [4] $end
$var wire 1 ? mem_ldata [3] $end
$var wire 1 @ mem_ldata [2] $end
$var wire 1 A mem_ldata [1] $end
$var wire 1 B mem_ldata [0] $end
$var reg 32 C mem_sdata [31:0] $end
$var reg 1 D mem_lenable $end
$var reg 4 E mem_mask [3:0] $end

$scope task print_state $end
$upscope $end

$scope module DatamemTest $end
$var parameter 32 F SIZE $end
$var wire 1 G clk $end
$var wire 1 H mem_addr [31] $end
$var wire 1 I mem_addr [30] $end
$var wire 1 J mem_addr [29] $end
$var wire 1 K mem_addr [28] $end
$var wire 1 L mem_addr [27] $end
$var wire 1 M mem_addr [26] $end
$var wire 1 N mem_addr [25] $end
$var wire 1 O mem_addr [24] $end
$var wire 1 P mem_addr [23] $end
$var wire 1 Q mem_addr [22] $end
$var wire 1 R mem_addr [21] $end
$var wire 1 S mem_addr [20] $end
$var wire 1 T mem_addr [19] $end
$var wire 1 U mem_addr [18] $end
$var wire 1 V mem_addr [17] $end
$var wire 1 W mem_addr [16] $end
$var wire 1 X mem_addr [15] $end
$var wire 1 Y mem_addr [14] $end
$var wire 1 Z mem_addr [13] $end
$var wire 1 [ mem_addr [12] $end
$var wire 1 \ mem_addr [11] $end
$var wire 1 ] mem_addr [10] $end
$var wire 1 ^ mem_addr [9] $end
$var wire 1 _ mem_addr [8] $end
$var wire 1 ` mem_addr [7] $end
$var wire 1 a mem_addr [6] $end
$var wire 1 b mem_addr [5] $end
$var wire 1 c mem_addr [4] $end
$var wire 1 d mem_addr [3] $end
$var wire 1 e mem_addr [2] $end
$var wire 1 f mem_addr [1] $end
$var wire 1 g mem_addr [0] $end
$var wire 1 # mem_ldata [31] $end
$var wire 1 $ mem_ldata [30] $end
$var wire 1 % mem_ldata [29] $end
$var wire 1 & mem_ldata [28] $end
$var wire 1 ' mem_ldata [27] $end
$var wire 1 ( mem_ldata [26] $end
$var wire 1 ) mem_ldata [25] $end
$var wire 1 * mem_ldata [24] $end
$var wire 1 + mem_ldata [23] $end
$var wire 1 , mem_ldata [22] $end
$var wire 1 - mem_ldata [21] $end
$var wire 1 . mem_ldata [20] $end
$var wire 1 / mem_ldata [19] $end
$var wire 1 0 mem_ldata [18] $end
$var wire 1 1 mem_ldata [17] $end
$var wire 1 2 mem_ldata [16] $end
$var wire 1 3 mem_ldata [15] $end
$var wire 1 4 mem_ldata [14] $end
$var wire 1 5 mem_ldata [13] $end
$var wire 1 6 mem_ldata [12] $end
$var wire 1 7 mem_ldata [11] $end
$var wire 1 8 mem_ldata [10] $end
$var wire 1 9 mem_ldata [9] $end
$var wire 1 : mem_ldata [8] $end
$var wire 1 ; mem_ldata [7] $end
$var wire 1 < mem_ldata [6] $end
$var wire 1 = mem_ldata [5] $end
$var wire 1 > mem_ldata [4] $end
$var wire 1 ? mem_ldata [3] $end
$var wire 1 @ mem_ldata [2] $end
$var wire 1 A mem_ldata [1] $end
$var wire 1 B mem_ldata [0] $end
$var wire 1 h mem_sdata [31] $end
$var wire 1 i mem_sdata [30] $end
$var wire 1 j mem_sdata [29] $end
$var wire 1 k mem_sdata [28] $end
$var wire 1 l mem_sdata [27] $end
$var wire 1 m mem_sdata [26] $end
$var wire 1 n mem_sdata [25] $end
$var wire 1 o mem_sdata [24] $end
$var wire 1 p mem_sdata [23] $end
$var wire 1 q mem_sdata [22] $end
$var wire 1 r mem_sdata [21] $end
$var wire 1 s mem_sdata [20] $end
$var wire 1 t mem_sdata [19] $end
$var wire 1 u mem_sdata [18] $end
$var wire 1 v mem_sdata [17] $end
$var wire 1 w mem_sdata [16] $end
$var wire 1 x mem_sdata [15] $end
$var wire 1 y mem_sdata [14] $end
$var wire 1 z mem_sdata [13] $end
$var wire 1 { mem_sdata [12] $end
$var wire 1 | mem_sdata [11] $end
$var wire 1 } mem_sdata [10] $end
$var wire 1 ~ mem_sdata [9] $end
$var wire 1 !! mem_sdata [8] $end
$var wire 1 "! mem_sdata [7] $end
$var wire 1 #! mem_sdata [6] $end
$var wire 1 $! mem_sdata [5] $end
$var wire 1 %! mem_sdata [4] $end
$var wire 1 &! mem_sdata [3] $end
$var wire 1 '! mem_sdata [2] $end
$var wire 1 (! mem_sdata [1] $end
$var wire 1 )! mem_sdata [0] $end
$var wire 1 *! mem_lenable $end
$var wire 1 +! mem_mask [3] $end
$var wire 1 ,! mem_mask [2] $end
$var wire 1 -! mem_mask [1] $end
$var wire 1 .! mem_mask [0] $end
$var wire 1 /! addr_word [31] $end
$var wire 1 0! addr_word [30] $end
$var wire 1 1! addr_word [29] $end
$var wire 1 2! addr_word [28] $end
$var wire 1 3! addr_word [27] $end
$var wire 1 4! addr_word [26] $end
$var wire 1 5! addr_word [25] $end
$var wire 1 6! addr_word [24] $end
$var wire 1 7! addr_word [23] $end
$var wire 1 8! addr_word [22] $end
$var wire 1 9! addr_word [21] $end
$var wire 1 :! addr_word [20] $end
$var wire 1 ;! addr_word [19] $end
$var wire 1 <! addr_word [18] $end
$var wire 1 =! addr_word [17] $end
$var wire 1 >! addr_word [16] $end
$var wire 1 ?! addr_word [15] $end
$var wire 1 @! addr_word [14] $end
$var wire 1 A! addr_word [13] $end
$var wire 1 B! addr_word [12] $end
$var wire 1 C! addr_word [11] $end
$var wire 1 D! addr_word [10] $end
$var wire 1 E! addr_word [9] $end
$var wire 1 F! addr_word [8] $end
$var wire 1 G! addr_word [7] $end
$var wire 1 H! addr_word [6] $end
$var wire 1 I! addr_word [5] $end
$var wire 1 J! addr_word [4] $end
$var wire 1 K! addr_word [3] $end
$var wire 1 L! addr_word [2] $end
$var wire 1 M! addr_word [1] $end
$var wire 1 N! addr_word [0] $end
$var reg 32 O! rdata [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
b0 "
b11011110101011011011111011101111 C
0D
b1111 E
b0 O!
b1000000000000 F
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
0)
0(
0'
0&
0%
0$
0#
0N!
0M!
0L!
0K!
0J!
0I!
0H!
0G!
0F!
0E!
0D!
0C!
0B!
0A!
0@!
0?!
0>!
0=!
0<!
0;!
0:!
09!
08!
07!
06!
05!
04!
03!
02!
01!
00!
0/!
1.!
1-!
1,!
1+!
0*!
1)!
1(!
1'!
1&!
0%!
1$!
1#!
1"!
0!!
1~
1}
1|
1{
1z
0y
1x
1w
0v
1u
1t
0s
1r
0q
1p
0o
1n
1m
1l
1k
0j
1i
1h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
$end
#5000
1!
1G
#10000
b0 E
b100 "
b11001010111111101011101010111110 C
b1111 E
0!
0)!
1%!
0#!
0}
0w
1v
1s
1q
0m
0k
1e
1N!
0G
#15000
1!
1G
#20000
b0 E
1D
b0 "
0!
1*!
0e
0.!
0-!
0,!
0+!
0N!
0G
#25000
1!
1G
b11011110101011011011111011101111 O!
1B
1A
1@
1?
1=
1<
1;
19
18
17
16
15
13
12
10
1/
1-
1+
1)
1(
1'
1&
1$
1#
#30000
0D
b100 "
1D
0!
1e
1N!
0G
#35000
1!
1G
b11001010111111101011101010111110 O!
0B
1>
0<
08
02
11
1.
1,
0(
0&
#40000
0D
